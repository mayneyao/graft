#!/usr/bin/env bash
set -euo pipefail

USAGE=$(
    cat <<EOF
Usage: $0 [OPTIONS]

Options:
  -v<VID>            Use the specified Volume ID (default: GontkHa6QVLMYnkyk16wUP).
  --random-vid       Generate and use a random VID.
  --random-cid       Generate and use a random client ID and temporary data directory.
  --release          Build/run in release mode.
  --trace            Enable trace-level logging (RUST_LOG=trace).
  --fly              Use Fly-hosted MetaStore and PageStore services.
  --gdb              Run sqlite3 under gdb debugger.
EOF
)

GIT_ROOT="$(git rev-parse --show-toplevel)"

TARGET="debug"
BUILD_FLAGS=""
VID="GontkHa6QVLMYnkyk16wUP"

GDB=${GDB:-0}
export RUST_LOG=${RUST_LOG:-warn}

# parse flags
while [[ $# -gt 0 ]]; do
    case $1 in
        -v*)
            VID="${1:2}"
            shift
            ;;
        --random-vid)
            VID="random"
            shift
            ;;
        --random-cid)
            export GRAFT_CLIENT_ID="$(just run tool cid)"
            export GRAFT_DATA_DIR="$(mktemp -d)"
            shift
            ;;
        --release)
            TARGET="release"
            BUILD_FLAGS="--release"
            shift
            ;;
        --trace)
            RUST_LOG="trace"
            shift
            ;;
        --fly)
            export GRAFT_METASTORE="https://graft-metastore.fly.dev"
            export GRAFT_PAGESTORE="https://graft-pagestore.fly.dev"
            shift
            ;;
        --gdb)
            GDB=1
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "${USAGE}"
            exit 1
            ;;
    esac
done

cargo build ${BUILD_FLAGS} --features precept/disabled --package graft-sqlite-extension

# Discover the path to the VFS depending on platform
LIB_PATH="${GIT_ROOT}/target/${TARGET}"
if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
    LIB_PATH="${LIB_PATH}/graft.dll"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    LIB_PATH="${LIB_PATH}/libgraft.dylib"
else
    LIB_PATH="${LIB_PATH}/libgraft.so"
fi

ARGS=(
    -header
    -table
    -cmd '.log stderr'
    -cmd ".load '${LIB_PATH}'"
    -cmd ".open 'file:${VID}?vfs=graft'"
)

if [ "${GDB}" == 1 ]; then
    GDB_ARGS=(
        --eval-command="set breakpoint pending on"
        --eval-command="break rust_panic"
        -ex run
        --args sqlite3
        "${ARGS[@]}"
    )
    exec rust-gdb "${GDB_ARGS[@]}"
else
    exec just run sqlite bin "${ARGS[@]}"
fi
