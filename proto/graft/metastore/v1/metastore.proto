syntax = "proto3";
package graft.metastore.v1;

import "graft/common/v1/common.proto";

// Request a snapshot of the volume at the given LSN (or latest).
// Returns: graft.metastore.v1.SnapshotResponse
message SnapshotRequest {
  bytes vid = 1;
  optional uint64 lsn = 2;
}

message SnapshotResponse { graft.common.v1.Snapshot snapshot = 1; }

// Retrieve the snapshot at the end of the given LSN range along with a Splinter
// containing all changed indices. If the start of the range is Unbounded, it
// will be set to the last checkpoint.
// Returns: graft.metastore.v1.PullGraftResponse
message PullGraftRequest {
  bytes vid = 1;
  graft.common.v1.LsnRange range = 2;
}

message PullGraftResponse {
  graft.common.v1.Snapshot snapshot = 1;
  graft.common.v1.LsnRange range = 2;
  bytes graft = 3;
}

// Retrieve all of the commits to the Volume in the provided LSN Range. If the
// start of the range is Unbounded, it will be set to the last checkpoint.
// Returns: graft.metastore.v1.PullSegmentsResponse
message PullCommitsRequest {
  bytes vid = 1;
  graft.common.v1.LsnRange range = 2;
}

message PullCommitsResponse { repeated graft.common.v1.Commit commits = 1; }

// Commit changes to a Volume if it is safe to do so. The provided Snapshot LSN
// is the snapshot the commit was based on. Returns the newly committed Snapshot
// metadata on success.
message CommitRequest {
  bytes vid = 1;
  bytes cid = 2;
  optional uint64 snapshot_lsn = 3;
  uint32 page_count = 4;
  repeated graft.common.v1.SegmentInfo segments = 5;
}

message CommitResponse { graft.common.v1.Snapshot snapshot = 1; }
