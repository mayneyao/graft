name: Release Graft

on:
  workflow_run:
    workflows: ["Prepare release"]
    types: [completed]
    branches:
      - "release/**"

concurrency:
  group: release-publish
  cancel-in-progress: true

jobs:
  notify:
    # Only continue if the upstream workflow finished without errors
    if: |
      github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-24.04
    permissions:
      checks: write
    steps:
      - name: Post GitHub check
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const sha = github.event.workflow_run.head_sha;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;

            await github.rest.checks.create({
              owner,
              repo,
              name: "Release workflow",
              head_sha: sha,
              status: "completed",
              conclusion: "success",
              output: {
                title: "Release workflow",
                summary: `See full run [here](${runUrl}).`
              },
              details_url: runUrl
            });

  release:
    needs: notify
    runs-on: ubuntu-24.04
    environment: publishing
    permissions:
      contents: write
      id-token: write
      packages: write

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Download distx artifact from the 'Prepare release' run
        uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4
        with:
          name: distx
          run-id: ${{ github.event.workflow_run.id }}
          path: distx/

      - name: Read metadata files
        id: meta
        run: |
          set -euo pipefail
          METASTORE_TAG=$(cat distx/metastore_tag)
          PAGESTORE_TAG=$(cat distx/pagestore_tag)
          VERSION=$(cat distx/version)

          echo "metastore_tag=$METASTORE_TAG" >>"$GITHUB_OUTPUT"
          echo "pagestore_tag=$PAGESTORE_TAG" >>"$GITHUB_OUTPUT"
          echo "version=$VERSION"             >>"$GITHUB_OUTPUT"

          if [[ "$VERSION" == *-rc* ]]; then
            echo "prerelease=true" >>"$GITHUB_OUTPUT"
          else
            echo "prerelease=false" >>"$GITHUB_OUTPUT"
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install node
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "22"
          registry-url: "https://registry.npmjs.org"

      - name: Install uv
        uses: astral-sh/setup-uv@d4b2f3b6ecc6e67c4457f6d3e41ec42d3d0fcb86 # v5
        with:
          enable-cache: false
          cache-dependency-glob: ""

      - name: Install Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2

      - name: Push git tag
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          TAG_NAME="v${{ steps.meta.outputs.version }}"
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"

      - name: Update GitHub Release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631 # v2
        with:
          name: v${{ steps.meta.outputs.version }}
          draft: false
          tag_name: v${{ steps.meta.outputs.version }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
          make_latest: ${{ steps.meta.outputs.prerelease == 'false' }}

      - name: Publish crates
        run: |
          set -euo pipefail
          CRATES=(
            graft-proto
            graft-core
            graft-tracing
            graft-client
            graft-sqlite
          )
          for crate in "${CRATES[@]}"; do
            cargo publish -p "$crate"
          done

      - name: Publish metastore and pagestore images
        env:
          METASTORE_SRC: ${{ steps.meta.outputs.metastore_tag }}
          PAGESTORE_SRC: ${{ steps.meta.outputs.pagestore_tag }}
          VERSION: ${{ steps.meta.outputs.version }}
        run: |
          set -euo pipefail

          # copies the entire manifest list without pulling layers
          copy_manifest() {
            local src="$1" repo="$2" ver="$3"
            docker buildx imagetools create \
              --tag "${repo}:${ver}" \
              --tag "${repo}:latest" \
              "${src}"
          }

          copy_manifest "${METASTORE_SRC}" "ghcr.io/orbitinghail/metastore" "${VERSION}"
          copy_manifest "${PAGESTORE_SRC}"  "ghcr.io/orbitinghail/pagestore"  "${VERSION}"

      - name: Publish NPM Packages
        run: |
          for file in distx/npm/*; do
            npm publish --access public "$file"
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish Ruby Packages
        run: |
          for file in distx/gem/*; do
            gem push "$file"
          done
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}

      - name: Publish PyPI Packages
        run: |
          uv publish distx/pip/*
          uv publish distx/datasette/*
          uv publish distx/sqlite_utils/*
