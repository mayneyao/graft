#!/usr/bin/env bash
set -euo pipefail

DIR="docs/src/content/docs/docs/rfcs"

# Prompt for title
read -rp "RFC Title: " TITLE

# Slugify title
SLUG=$(echo "$TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | sed -E 's/^-+|-+$//g')

# Find next 4-digit ID
ID=$(find "$DIR" -type f -name '[0-9][0-9][0-9][0-9]-*.mdx' |
    sed -E 's|.*/([0-9]{4})-.*|\1|' |
    sort -n | tail -n1)
ID=$(printf "%04d" $((10#${ID:-0} + 1)))

# File path
FILENAME="${ID}-${SLUG}.mdx"
FULLPATH="${DIR}/${FILENAME}"

# Current date
DATE=$(date +%F)

# Write template
cat >"$FULLPATH" <<EOF
---
title: $ID - $TITLE
rfc:
  id: $ID
  slug: $SLUG
  startDate: $DATE
  issue: ~
  pr: ~
---

import RfcInfo from "@components/RfcInfo.astro";

<RfcInfo {...frontmatter.rfc} />

One paragraph explanation of the feature.

## Motivation

Any changes to Graft should focus on solving a problem that users of Graft are having. This section should explain this problem in detail, including necessary background.

It should also contain several specific use cases where this feature can help a user, and explain how it helps. This can then be used to guide the design of the feature.

This section is one of the most important sections of any RFC, and can be lengthy.

## Guide-level Explanation

Explain the proposal as if to a user or contributor unfamiliar with the internals. Include examples and how this change affects them.

## Reference-level Explanation

Detailed technical breakdown. Cover APIs, algorithms, data structures, formats, edge cases, and performance implications.

## Drawbacks

Why should we *not* do this?

## Rationale and alternatives

- Why is this design the best in the space of possible designs?
- What other designs have been considered and what is the rationale for not choosing them?
- What is the impact of not doing this?

## Prior art

Discuss prior art, both the good and the bad, in relation to this proposal. A few examples of what this can include are:

- Does this feature exist in other projects and what experience has their community had?
- Papers: Are there any published papers or great posts that discuss this? If you have some relevant papers to refer to, this can serve as a more detailed theoretical background.

This section is intended to encourage you as an author to think about the lessons from other projects, provide readers of your RFC with a fuller picture. If there is no prior art, that is fine - your ideas are interesting to us whether they are brand new or inspired.

## Unresolved questions

- What parts of the design do you expect to resolve through the RFC process before this gets merged?
- What parts of the design do you expect to resolve through the implementation of this feature before stabilization?
- What related issues do you consider out of scope for this RFC that could be addressed in the future independently of the solution that comes out of this RFC?

## Future possibilities

Think about what the natural extension and evolution of your proposal would be and how it would affect the project as a whole in a holistic way. Try to use this section as a tool to more fully consider all possible interactions with the project in your proposal. Also consider how this all fits into the roadmap for the project.

This is also a good place to "dump ideas", if they are out of scope for the RFC you are writing but otherwise related.

If you have tried and cannot think of any future possibilities, you may simply state that you cannot think of anything.

Note that having something written down in the future-possibilities section is not a reason to accept the current or a future RFC; such notes should be in the section on motivation or rationale in this or subsequent RFCs.  The section merely provides additional information.
EOF

echo "RFC created: $FULLPATH"
